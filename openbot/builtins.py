import ruamel.yaml as yaml

import openbot.config
import openbot.logger
import openbot.core
from openbot.abstract.function import FunctionBase
from openbot.abstract.plugin import PluginBase


class Builtins(PluginBase):
  """
  Built-in Functions.
  This file will contain functions that are either too small or too vital to be included in the jhnhnck_coreftns plugin.
  These are fundamentally the same as any other function and could preform the same in a command, but is required to be
  loaded for the bot to work.

  Contents.
    chat_bind, chat_reload, chat_restart, chat_shutdown, chat_sleep
  """
  def __init__(self):
    plugin = """\
    description:
      plugin_name: Builtins
      domain_name: jhnhnck
      plugin_prefix: core
      plugin_description: Core functions included with discord-bot-core
      plugin_type: single-file
    versioning:
      plugin_version: {bot_core_version}
    functions:
      chat_bind:
        function_name: bind
        help_text: Use to specify a chat channel for commands and responses
        allowed_modifiers:
          --append: promote this channel to an approved channel
      chat_reload:
        function_name: reload
        help_text: Reloads config and plugins from file
      chat_shutdown:
        function_name: shutdown
        help_text: Completely stops the bot
      chat_restart:
        function_name: restart
        help_text: Completely stops then starts the bot again
      chat_sleep:
        function_name: sleep
        help_text: Ignore commands and mute output for a certain amount of time
        allowed_args_length: '1'
        args_description:
        - '[seconds]'
    """
    config = yaml.safe_load(plugin.format(bot_core_version=openbot.version_info))
    super().__init__(**config)


  class CmdBind(FunctionBase):

    def call(self, client, message, mod):
      """
      Call.
      Binds the discord bot to a specific channel
      """
      # has_permission will handle no permissions
      if openbot.config.has_perm(message.owner, 'admin.set_channel_bindings'):
        if mod.get('--append'):
          channel_ids = openbot.config.get_config('chant.channels.bind_text_channels')
          channel_ids.append(message.channel.id)
        else:
          channel_ids = [message.channel.id]

          openbot.config.set_config('chat.channels.bind_text_channels', channel_ids)


  class CmdReload(FunctionBase):

    def call(self):
      """
      Reload.
      Unloads all plugins and functions, then reruns the loader class and restarts the client
      """
      import time
      import importlib as imp
      start = time.time()
      imp.reload(openbot)

      openbot.core.server.execute('logout')
      openbot.core.startup(openbot.config.config_file, openbot.logger.locale_file)
      openbot.core.run(reload=start)


  class CmdShutdown(FunctionBase):

    def call(self, args, mod):
      """
      Shutdown.
      Completely stops the bot.
      """
      openbot.logger.log(':wave:', log_type=openbot.logger.LogLevel.info)
      openbot.core.server.execute('logout')


  class CmdRestart(FunctionBase):

    def call(self, args, mod):
      """
      Restart.
      Completely stops then starts the bot again
      """
      openbot.logger.log(':wave:', log_type=openbot.logger.LogLevel.info)
      openbot.core.server.execute('logout')
      raise openbot.OpenbotRestart


  class CmdSleep(FunctionBase):
    """
    Stub file for Builtins/chat_sleep.py
    Auto-generated by discord-bot-core on 2017-04-11 10:45:11.473323
    """

    def load_test(self):
      """
      Loading Self Test.
      Implement this method to allow for more vigorous control over loading requirements;
      You can delete this if not needed.
  
      Returns:
        Dictionary with two keys:
          state: True if the command should be loaded
          msg: Detailed error message
      """
      return {'state': False, 'msg': 'Stub Function'}


    def call(self, args, mod):
      """
      Call.
      Main entry point of the command; Ran when a command is sent through chat
  
      Args:
        args: array of arguments passed by the user
        mod: dictionary of modifiers passed by the user that are also defined in the pluginname.json file;
          extra modifiers are silently ignored
      """
      pass
