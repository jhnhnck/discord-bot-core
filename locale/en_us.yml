core:
  debug:
    col_value_error: Cannot determine column width; Using {message} columns instead
    gen_stub_function: ' Command "{message}" not found; Generating stub class {extra_info}'
    load_function_plugin_title: Enumerating functions for [{message}]
    load_function_success: ' Command "{message}" with qualified name "{error_point}" added'
    load_plugin_value_omitted: Plugin "{message}" is missing {optional} value "{key_name}"; Using "{sub_value}" while in dev environment
    stub_type_conflict: ' Command "{message}" could not be loaded from file "{path}" [invalid type "{type}"]'
    sys_info: |
      === Printing Version Info ===
      machine-type: {machine_type}
      machine-processor: {processor}
      machine-platform: platform
      python-version: {python_version}
      python-implementation: {python_implementation}
      bot-core-version: {core_full_version}
      bot-git-version: {core_git_version}
  error:
    args_length: Syntax Invalid on command \"{message}\". \n{error_point}
    bound_channel: An error occurred while binding to channel "{message}" [{error_point}]
    channel_none: The previous message starting with "{message}" could not be send
    command_error_suggest: Command "{error_point}" is not found; Did you mean "{message}"?
    command_not_found: Command "{message}" is not found
    command_specifics: Which command Did you mean?\n{message}
    config_key_error: An error occurred while finding the config value at key "{message}"
    function_loading: ' Command {message} could not be loaded. [{error_point}]'
    load_plugin_value_omitted: Plugin missing required value "{key_name}"
    locale_early_termination: Message {message} provided with truncated parent "{error_point}"
    locale_mismatched_identity: Message {message} could not be inserted into parent "{error_point}" due to invalid formatting
    locale_missing: Message {message} could not be associated to parent "{error_point}"
    plugin_loading: Plugin "{message}" could not be loaded. [{error_point}]
    plugin_missing_yaml: Plugin "{message}" could not be loaded; Could not find or read from file "{yaml_path}" or "{yaml_alt_path}"
  fatal:
    unload_at_error: |
      File could not be unloaded at "{message}"; Dumping here instead:\n
      ### FILE START ###
      {error_point}
      ### FILE END ###\n"
  info:
    bot_logged: Bot connected to Discord as "{message}"
    bound_channel: Bot successfully bound to channel "{message}"
    gen_new_config: Generating new configuration file at "{message}"
    plaintext: "{message}"
    settle: Waiting {message} second(s) for things to settle\r
  name: openbot-discord
  segments:
    at: at "{}"
    from: '"{}" from "{}"'
    stub_function: |
      from openbot.abstract.function import FunctionBase


      class {class_name}(FunctionBase):
        """
        Stub file for {plugin}/{function}.py
        Auto-generated by discord-bot-core on {date}
        """

        def load_test(self):
          """
          Loading Self Test.
          Implement this method to allow for more vigorous control over loading requirements;
          You can delete this if not needed.

          Returns:
            Dictionary with two keys:
              state: True if the command should be loaded
              msg: Detailed error message
          """
          return {{'state': False, 'msg': 'Stub Function'}}


        def call(self, args, mod):
          """
          Call.
          Main entry point of the command; Ran when a command is sent through chat

          Args:
            args: array of arguments passed by the user
            mod: dictionary of modifiers passed by the user that are also defined in the pluginname.json file;
              extra modifiers are silently ignored
          """
          pass
    two_length_and: '"{}" and "{}"'
    two_length_or: '"{}" or "{}"'
    within: within file "{}"
    with_level: '"{}" with level "{}"'
  warn:
    bound_channel: Bot could not be bound to channel "{message}"
    chat_message_no_init: Message with parent "{message}" set to be sent to chat before client init step; Canceling
    config_before_load: Config key "{message}" retrieved before config has been loaded
    config_loading_exception: File unable to be loaded from "{message}" due to {error_point}; Generating new version
    conflict_function_name: Command "{message}" has multiple targets; Specify which using {error_point}
    disabled_plugin: Plugin "{message}" is disabled and will not be loaded
    # plugin_domain_malformed: Plugin "{message}" has malformed name; Substituting dummy domain "{error_point}"
base:
  chat:
    blank_base: {message}
    debug_base: Debug.\n```\n{message}\n```
    error_base: An error occurred.\n```\n{message}\n```
    fatal_base: A fatal error occurred.\n```\n{message}\n```
    info_base: {message}
    trace_base: Trace.\n```\n{message}\n```
    warn_base: Warning.\n```\n{message}\n```
  cli:
    blank_base: "> {message}"
    chat_message: "> chat. {cli_base}"
    debug_base: "{blue}> debug. {message}{reset}"
    error_base: "{red}> error. {message}{reset}"
    fatal_base: "{dark_red}> fatal. {message}{reset}"
    info_base: "> info.  {message}"
    trace_base: "{green}> trace. {message}{reset}"
    warn_base: "{dark_yellow}> warn.  {message}{reset}"