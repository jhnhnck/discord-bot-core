{
  "core": {
    "debug": {
      "gen_stub_function": "Function \"{message}\" not found; Generating stub function",
      "load_function_plugin_title": "Enumerating functions for [{message}]",
      "load_function_success": " Added function \"{message}\" with qualified name \"{error_point}\""
    },
    "error": {
      "function_loading": " Function {message} could not be loaded. [{error_point}]",
      "locale_early_termination": "Message {message} provided with trucated parent \"{error_point}\"",
      "locale_missing": "Message {message} could not be associated to parent \"{error_point}\"",
      "plugin_loading": "Plugin \"{message}\" could not be loaded. [{error_point}]"
    },
    "fatal": {
      "unload_config_error": "Config could not be unloaded at \"{message}\"; Dumping config here instead:\n\n### CONFIG START ###\n{error_point}\n### CONFIG END ###\n"
    },
    "info": {
      "bot_logged": "Bot connected to Discord as \"{message}\"",
      "gen_new_config": "Generating new config at \"{message}\"",
      "plaintext": "{message}"
    },
    "name": "openbot-discord",
    "segments": {
      "from": "\"{}\" from \"{}\"",
      "stub_function": "from openbot.abstract.function import FunctionBase\n\n\nclass BotFunction(FunctionBase):\n  \"\"\"\n  Stub file for {plugin}/{function}.py\n  Auto-generated by discord-bot-core on {date}\n  \"\"\"\n\n  def load_test(self):\n    \"\"\"\n    Loading Self Test.\n    Override this method to allow for more vigorous control over loading requirements.\n\n    Returns:\n      Dictionary with two keys:\n        state: True if the function should be loaded\n        msg: Detailed error message (Do not use logging here; It may not always work)\n    \"\"\"\n    return {{'state': False, 'msg': 'Stub Function'}}\n\n  def call(self, args, mod):\n    \"\"\"\n    Call.\n    Main entry point for a function called with a command is initialized.\n\n    Args:\n      args: array of arguments passed by the user\n      mod: dictionary of modifiers passed by the user that are also defined in the pluginname.json file; extra modifiers\n       are sliently ignored\n    \"\"\"\n    pass\n",
      "sys_info": "=== Printing Version Info ===\nmachine-type: {machine_type}\nmachine-processor: {processor}\nmachine-platform: platform\npython-version: {python_version}\npython-implementation: {python_implementation}\nbot-core-version: {core_version}-{core_release_type}",
      "two_length_and": "\"{}\" and \"{}\"",
      "two_length_or": "\"{}\" or \"{}\"",
      "with_level": "\"{}\" with level \"{}\""
    },
    "warn": {
      "config_loading_exception": "Config not able to be loaded from \"{message}\" due to {error_point}; Generating new config",
      "conflict_function_name": "Function \"{message}\" has multiple targets; Specify which using {error_point}",
      "disabled_plugin": "Plugin \"{message}\" is disabled and will not be loaded",
      "plugin_domain_malformed": "Plugin \"{message}\" has malformed name; Substituting dummy domain \"{error_point}\""
    }
  },
  "format": {
    "bold": "\u001b[1m",
    "italic": "\u001b[1m",
    "reset": "\u001b[0m",
    "underline": "\u001b[4m"
  },
  "base": {
    "chat": {
      "blank_base": "{message}",
      "debug_base": "```\nDebug.\n{message}\n```",
      "error_base": "```\nAn error occurred.\n{message}\n```",
      "fatal_base": "```\nA fatal error occurred.\n{message}\n```",
      "info_base": "{message}",
      "trace_base": "```\nTrace.\n{message}\n```",
      "warn_base": "```\nWarning.\n{message}\n```"
    },
    "cli": {
      "blank_base": "> {message}",
      "debug_base": "{blue}> debug. {message}{reset}",
      "error_base": "{red}> error. {message}{reset}",
      "fatal_base": "{dark_red}> fatal. {message}{reset}",
      "info_base": "> info.  {message}",
      "trace_base": "{green}> trace. {message}{reset}",
      "warn_base": "{dark_yellow}> warn.  {message}{reset}"
    }
  },
  "colors": {
    "black": "\u001b[30m",
    "blue": "\u001b[94m",
    "cyan": "\u001b[96m",
    "dark_blue": "\u001b[34m",
    "dark_cyan": "\u001b[36m",
    "dark_gray": "\u001b[90m",
    "dark_red": "\u001b[31m",
    "dark_yellow": "\u001b[33m",
    "gray": "\u001b[37m",
    "green": "\u001b[32m",
    "lime": "\u001b[92m",
    "magenta": "\u001b[35m",
    "purple": "\u001b[95m",
    "red": "\u001b[91m",
    "white": "\u001b[97m",
    "yellow": "\u001b[93m"
  }
}
